<ResourceDictionary xmlns="https://github.com/avaloniaui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:assists="clr-namespace:Material.Styles.Assists"
                    xmlns:controls="clr-namespace:Material.Styles.Controls"
                    xmlns:converters="clr-namespace:Material.Styles.Converters"
                    xmlns:extensions="clr-namespace:Material.Styles.Controls.Extensions"
                    xmlns:internal="clr-namespace:Material.Styles.Assists.Internal">
  <ResourceDictionary.MergedDictionaries>
    <!-- Used for suppressing warning in IDE -->
    <ResourceInclude Source="avares://Material.Styles/Resources/Themes/Button.axaml" />
    <ResourceInclude Source="avares://Material.Styles/Resources/Themes/ToggleButton.axaml" />
    <ResourceInclude Source="avares://Material.Styles/Resources/Themes/FontFamily.axaml" />
    <ResourceInclude Source="avares://Material.Styles/Resources/Themes/DataValidationErrors.axaml" />
    <ResourceInclude Source="avares://Material.Styles/Controls/MaterialUnderline.axaml" />
  </ResourceDictionary.MergedDictionaries>

  <Design.PreviewWith>
    <StackPanel Spacing="16" Width="400" Margin="16">
      <TextBox Watermark="pWatermark" />
      <TextBox Watermark="Watermark floating" UseFloatingWatermark="True" />
      <TextBox Watermark="Watermark" assists:TextFieldAssist.Label="Label with watermark" />
      <TextBox Watermark="Watermark" UseFloatingWatermark="True" assists:TextFieldAssist.Label="Label floating with watermark" />
      <TextBox UseFloatingWatermark="True" assists:TextFieldAssist.Label="Label floating" />
      <TextBox assists:TextBoxAssist.CharacterCounterMode="OnlyCounter" Watermark="Watermark floating" UseFloatingWatermark="True" />
      <TextBox assists:TextBoxAssist.CharacterCounterMode="OnlyLimit" Watermark="Watermark" assists:TextFieldAssist.Label="Label with watermark" />
      <TextBox assists:TextBoxAssist.CharacterCounterMode="RemainingAlways" Watermark="Watermark" UseFloatingWatermark="True" assists:TextFieldAssist.Label="Label floating with watermark" />
      <TextBox assists:TextBoxAssist.CharacterCounterMode="CounterSlashLimit" UseFloatingWatermark="True" assists:TextFieldAssist.Label="Label floating" />
      <TextBox assists:TextBoxAssist.CharacterCounterMode="RemainingIfCloseToLimit" UseFloatingWatermark="True" assists:TextFieldAssist.Label="Label floating" />
      <TextBox Theme="{StaticResource MaterialFilledTextBox}" Watermark="pWatermark" />
      <TextBox Theme="{StaticResource MaterialFilledTextBox}" Watermark="Watermark floating" UseFloatingWatermark="True" />
      <TextBox Theme="{StaticResource MaterialFilledTextBox}" Watermark="Watermark" assists:TextFieldAssist.Label="Label with watermark" />
      <TextBox Theme="{StaticResource MaterialFilledTextBox}" Watermark="Watermark" UseFloatingWatermark="True" assists:TextFieldAssist.Label="Label floating with watermark" />
      <TextBox Theme="{StaticResource MaterialFilledTextBox}" MaxLength="" UseFloatingWatermark="True" assists:TextFieldAssist.Label="Label floating" />
      <TextBox Watermark="Watermark" Theme="{StaticResource MaterialOutlineTextBox}" />
      <TextBox Watermark="Watermark" UseFloatingWatermark="True" Theme="{StaticResource MaterialOutlineTextBox}" />
      <TextBox Watermark="Watermark" UseFloatingWatermark="True" assists:TextFieldAssist.Label="Label" Theme="{StaticResource MaterialOutlineTextBox}" />
    </StackPanel>
  </Design.PreviewWith>

  <converters:GetPlatformHotkeyConfigServiceConverter x:Key="GetPlatformHotkeyConfig" />
  <converters:CharacterCounterModeToTextConverter x:Key="CharacterCounterModeToTextConverter" />

  <StreamGeometry x:Key="TextBoxClearButtonData">M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z</StreamGeometry>
  <StreamGeometry x:Key="PasswordBoxRevealButtonData">M12,9A3,3 0 0,1 15,12A3,3 0 0,1 12,15A3,3 0 0,1 9,12A3,3 0 0,1 12,9M12,4.5C17,4.5 21.27,7.61 23,12C21.27,16.39 17,19.5 12,19.5C7,19.5 2.73,16.39 1,12C2.73,7.61 7,4.5 12,4.5M3.18,12C4.83,15.36 8.24,17.5 12,17.5C15.76,17.5 19.17,15.36 20.82,12C19.17,8.64 15.76,6.5 12,6.5C8.24,6.5 4.83,8.64 3.18,12Z</StreamGeometry>
  <StreamGeometry x:Key="PasswordBoxHideButtonData">M2,5.27L3.28,4L20,20.72L18.73,22L15.65,18.92C14.5,19.3 13.28,19.5 12,19.5C7,19.5 2.73,16.39 1,12C1.69,10.24 2.79,8.69 4.19,7.46L2,5.27M12,9A3,3 0 0,1 15,12C15,12.35 14.94,12.69 14.83,13L11,9.17C11.31,9.06 11.65,9 12,9M12,4.5C17,4.5 21.27,7.61 23,12C22.18,14.08 20.79,15.88 19,17.19L17.58,15.76C18.94,14.82 20.06,13.54 20.82,12C19.17,8.64 15.76,6.5 12,6.5C10.91,6.5 9.84,6.68 8.84,7L7.3,5.47C8.74,4.85 10.33,4.5 12,4.5M3.18,12C4.83,15.36 8.24,17.5 12,17.5C12.69,17.5 13.37,17.43 14,17.29L11.72,15C10.29,14.85 9.15,13.71 9,12.28L5.6,8.87C4.61,9.72 3.78,10.78 3.18,12Z</StreamGeometry>

  <ContextMenu x:Key="DefaultTextBoxContextMenu"
               Name="TextBoxContextMenu"
               WindowManagerAddShadowHint="False"
               Cursor="Arrow">

    <MenuItem Name="TextBoxContextMenuCutItem"
              Header="Cut"
              Command="{Binding $parent[TextBox].Cut}"
              IsEnabled="{Binding $parent[TextBox].CanCut}"
              InputGesture="{Binding Converter={StaticResource GetPlatformHotkeyConfig}, ConverterParameter=cut}"
              Icon="{extensions:MaterialInternalIcon Kind=MaterialContentCut, Size=24}" />

    <MenuItem Name="TextBoxContextMenuCopyItem"
              Header="Copy"
              Command="{Binding $parent[TextBox].Copy}"
              IsEnabled="{Binding $parent[TextBox].CanCopy}"
              InputGesture="{Binding Converter={StaticResource GetPlatformHotkeyConfig}, ConverterParameter=copy}"
              Icon="{extensions:MaterialInternalIcon Kind=MaterialContentCopy, Size=24}" />

    <MenuItem Name="TextBoxContextMenuPasteItem"
              Header="Paste"
              Command="{Binding $parent[TextBox].Paste}"
              IsEnabled="{Binding $parent[TextBox].CanPaste}"
              InputGesture="{Binding Converter={StaticResource GetPlatformHotkeyConfig}, ConverterParameter=paste}"
              Icon="{extensions:MaterialInternalIcon Kind=MaterialContentPaste, Size=24}" />

    <Separator />

    <!-- ReSharper disable once MarkupAttributeTypo -->
    <MenuItem Name="TextBoxContextMenuSelectAllItem"
              Header="Select All"
              Command="{Binding $parent[TextBox].SelectAll}"
              InputGesture="{Binding Converter={StaticResource GetPlatformHotkeyConfig}, ConverterParameter=selectall}"
              Icon="{extensions:MaterialInternalIcon Kind=MaterialSelectAll, Size=24}" />
  </ContextMenu>

  <ControlTheme x:Key="MaterialTextBoxFlyoutPresenter" TargetType="MenuFlyoutPresenter"
                BasedOn="{StaticResource {x:Type MenuFlyoutPresenter}}">
    <Setter Property="Cursor" Value="Arrow" />
  </ControlTheme>

  <MenuFlyout x:Key="DefaultTextBoxMenuFlyout"
              Placement="Bottom"
              FlyoutPresenterTheme="{StaticResource MaterialTextBoxFlyoutPresenter}">
    <MenuItem Name="TextBoxMenuFlyoutCutItem"
              Header="Cut"
              Command="{Binding $parent[TextBox].Cut}"
              IsEnabled="{Binding $parent[TextBox].CanCut}"
              InputGesture="{Binding Converter={StaticResource GetPlatformHotkeyConfig}, ConverterParameter=cut}"
              Icon="{extensions:MaterialInternalIcon Kind=MaterialContentCut, Size=24}" />

    <MenuItem Name="TextBoxMenuFlyoutCopyItem"
              Header="Copy"
              Command="{Binding $parent[TextBox].Copy}"
              IsEnabled="{Binding $parent[TextBox].CanCopy}"
              InputGesture="{Binding Converter={StaticResource GetPlatformHotkeyConfig}, ConverterParameter=copy}"
              Icon="{extensions:MaterialInternalIcon Kind=MaterialContentCopy, Size=24}" />

    <MenuItem Name="TextBoxMenuFlyoutPasteItem"
              Header="Paste"
              Command="{Binding $parent[TextBox].Paste}"
              IsEnabled="{Binding $parent[TextBox].CanPaste}"
              InputGesture="{Binding Converter={StaticResource GetPlatformHotkeyConfig}, ConverterParameter=paste}"
              Icon="{extensions:MaterialInternalIcon Kind=MaterialContentPaste, Size=24}" />

    <Separator />

    <!-- ReSharper disable once MarkupAttributeTypo -->
    <MenuItem Name="TextBoxMenuFlyoutSelectAllItem"
              Header="Select All"
              Command="{Binding $parent[TextBox].SelectAll}"
              InputGesture="{Binding Converter={StaticResource GetPlatformHotkeyConfig}, ConverterParameter=selectall}"
              Icon="{extensions:MaterialInternalIcon Kind=MaterialSelectAll, Size=24}" />
  </MenuFlyout>

  <converters:RectHollowClipConverter x:Key="RectangleHollowGeometry" />
  <Thickness x:Key="MaterialOutlineTextBoxClippingParameter">4 0</Thickness>

  <ControlTheme x:Key="ClearTextBoxButton"
                BasedOn="{StaticResource MaterialFlatButton}"
                TargetType="Button">
    <Setter Property="Padding" Value="4" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="ToolTip.Tip" Value="Click to clear field" />
    <Setter Property="Content">
      <Template>
        <controls:MaterialInternalIcon Kind="Close"
                                       Width="16" Height="16" />
      </Template>
    </Setter>
  </ControlTheme>

  <ControlTheme x:Key="RevealTextMaskToggleButtonTheme"
                BasedOn="{StaticResource MaterialFlatToggleButton}"
                TargetType="ToggleButton">
    <Setter Property="Padding" Value="4" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Center" />

    <Style Selector="^:unchecked">
      <Setter Property="ToolTip.Tip" Value="Click to reveal content of field" />
      <!-- I know this is a bad approach to make it works
                 Might I should rework it later. For now it just works -->
      <Setter Property="Content">
        <Template>
          <controls:MaterialInternalIcon Kind="EyeOffOutline"
                                         Width="16" Height="16" />
        </Template>
      </Setter>
    </Style>

    <Style Selector="^:checked">
      <Setter Property="ToolTip.Tip" Value="Click to hide content of field" />
      <Setter Property="Content">
        <Template>
          <controls:MaterialInternalIcon Kind="EyeOutline"
                                         Width="16" Height="16" />
        </Template>
      </Setter>
    </Style>
  </ControlTheme>

  <Template x:Key="ClearTextBoxButtonTemplate">
    <Button Name="PART_ClearButton"
            Theme="{StaticResource ClearTextBoxButton}"
            Command="{Binding $parent[TextBox].Clear}" />
  </Template>

  <Template x:Key="RevealTextMaskToggleButtonTemplate">
    <ToggleButton Name="PART_PasswordRevealToggle"
                  Theme="{StaticResource RevealTextMaskToggleButtonTheme}"
                  IsChecked="{Binding $parent[TextBox].RevealPassword, Mode=TwoWay}" />
  </Template>

  <!-- Standard text field theme https://material.io/archive/guidelines/components/text-fields.html -->
  <!-- The template is compatible for filled and outline text field -->
  <ControlTheme x:Key="MaterialTextBox" TargetType="TextBox">
    <Setter Property="Cursor" Value="IBeam" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="SelectionBrush" Value="{DynamicResource MaterialPrimaryMidBrush}" />
    <Setter Property="SelectionForegroundBrush" Value="{DynamicResource MaterialPrimaryMidForegroundBrush}" />
    <Setter Property="ContextFlyout" Value="{StaticResource DefaultTextBoxMenuFlyout}" />
    <Setter Property="CaretBrush" Value="{DynamicResource MaterialPrimaryMidBrush}" />
    <Setter Property="FontSize" Value="16" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialDesignFonts}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="InputMethod.IsInputMethodEnabled" Value="True" />
    <Setter Property="assists:TextFieldAssist.Watermark" Value="{Binding $self.Watermark}" />
    <Setter Property="assists:TextFieldAssist.UseFloatingLabel" Value="{Binding $self.UseFloatingWatermark}" />
    <Setter Property="ClipToBounds" Value="True" />
    <Setter Property="Template">
      <ControlTemplate>
        <Grid Name="PART_RootGrid"
              RowDefinitions="* Auto Auto">

          <Border Name="PART_ContentGridBorder"
                  ClipToBounds="{TemplateBinding ClipToBounds}"
                  CornerRadius="{TemplateBinding CornerRadius}">
            <Grid Name="PART_ContentGrid"
                  ColumnDefinitions="16 Auto * Auto 12">
              <Border Name="PART_ContentBorder"
                      Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="5"
                      Classes.use-clipping="{TemplateBinding internal:MaterialInternalAttachedProperties.UseClippingForBorder}"
                      Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      CornerRadius="{TemplateBinding CornerRadius}">
                <Border.Styles>
                  <Style Selector="TextBox:has-label /template/ Border.use-clipping">
                    <Setter Property="Clip">
                      <MultiBinding Converter="{StaticResource RectangleHollowGeometry}"
                                    ConverterParameter="{StaticResource MaterialOutlineTextBoxClippingParameter}"
                                    RelativeSource="{RelativeSource AncestorType=TextBox}">
                        <Binding ElementName="PART_ContentBorder" Path="Bounds" />
                        <Binding ElementName="PART_LabelRootBorder" Path="Bounds" />
                        <Binding ElementName="PART_LabelRootBorder" Path="RenderTransform" />
                      </MultiBinding>
                    </Setter>
                  </Style>
                </Border.Styles>
              </Border>

              <ContentControl Name="PART_LeftContentControl"
                              Grid.Row="0" Grid.Column="1"
                              Content="{TemplateBinding InnerLeftContent}"
                              IsVisible="{TemplateBinding InnerLeftContent, Converter={x:Static ObjectConverters.IsNotNull}}"
                              ClipToBounds="False" />

              <ContentControl Name="PART_RightContentControl"
                              Grid.Row="0" Grid.Column="3"
                              Content="{TemplateBinding InnerRightContent}"
                              IsVisible="{TemplateBinding InnerRightContent, Converter={x:Static ObjectConverters.IsNotNull}}"
                              ClipToBounds="False" />

              <Border Name="PART_LabelRootBorder"
                      Grid.Row="0" Grid.Column="2">
                <TextBlock Name="PART_LabelText"
                           Text="{TemplateBinding (assists:TextFieldAssist.Label)}" />
              </Border>

              <TextBlock Name="PART_WatermarkText"
                         Grid.Row="0" Grid.Column="2"
                         Text="{TemplateBinding (assists:TextFieldAssist.Watermark)}"
                         FontFamily="{TemplateBinding FontFamily}"
                         FontSize="{TemplateBinding FontSize}"
                         FontStyle="{TemplateBinding FontStyle}"
                         FontWeight="{TemplateBinding FontWeight}"
                         Margin="{Binding #PART_ScrollViewer.Margin}" />

              <ScrollViewer Name="PART_ScrollViewer"
                            Grid.Row="0" Grid.Column="2"
                            HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                            VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
                <TextPresenter Name="PART_TextPresenter"
                               CaretBrush="{TemplateBinding CaretBrush}"
                               CaretIndex="{TemplateBinding CaretIndex}"
                               TextBlock.FontFamily="{TemplateBinding FontFamily}"
                               TextBlock.FontSize="{TemplateBinding FontSize}"
                               TextBlock.FontStyle="{TemplateBinding FontStyle}"
                               TextBlock.FontWeight="{TemplateBinding FontWeight}"
                               TextBlock.Foreground="{TemplateBinding Foreground}"
                               InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}"
                               PasswordChar="{TemplateBinding PasswordChar}"
                               RevealPassword="{TemplateBinding RevealPassword}"
                               SelectionBrush="{TemplateBinding SelectionBrush}"
                               SelectionStart="{TemplateBinding SelectionStart}"
                               SelectionEnd="{TemplateBinding SelectionEnd}"
                               SelectionForegroundBrush="{TemplateBinding SelectionForegroundBrush}"
                               Text="{TemplateBinding Text, Mode=TwoWay}"
                               TextAlignment="{TemplateBinding TextAlignment}"
                               TextWrapping="{TemplateBinding TextWrapping}" />
              </ScrollViewer>
            </Grid>
          </Border>

          <controls:MaterialUnderline Name="PART_Underline" Grid.Row="1"
                                      Margin="0 -1 0 0" />

          <TextBlock Name="PART_CharactersCounter" Grid.Row="2"
                     HorizontalAlignment="Right">
            <TextBlock.Text>
              <MultiBinding Converter="{StaticResource CharacterCounterModeToTextConverter}">
                <TemplateBinding Property="assists:TextBoxAssist.CharacterCounterMode" />
                <TemplateBinding Property="Text" />
                <TemplateBinding Property="MaxLength" />
              </MultiBinding>
            </TextBlock.Text>
          </TextBlock>

          <DataValidationErrors Name="PART_DataValidation" Grid.Row="2"
                                Errors="{TemplateBinding (DataValidationErrors.Errors)}" />
        </Grid>
      </ControlTemplate>
    </Setter>

    <Style Selector="^:watermark-as-label">
      <Style Selector="^ /template/ TextBlock#PART_WatermarkText">
        <Setter Property="Text" Value="{x:Null}" />
      </Style>

      <Style Selector="^ /template/ TextBlock#PART_LabelText">
        <Setter Property="Text" Value="{Binding $parent[TextBox].Watermark}" />
      </Style>
    </Style>

    <!-- Default behaviour for TextFields -->
    <Style Selector="^ /template/ Grid#PART_ContentGrid">
      <Setter Property="Margin" Value="-16 0 -12 0" />
    </Style>

    <Style Selector="^ /template/ TextBlock#PART_HintsText">
      <Setter Property="Margin" Value="0,3,0,0" />
      <Setter Property="FontSize" Value="12" />
    </Style>

    <Style Selector="^ /template/ TextBlock#PART_WatermarkText">
      <Setter Property="IsVisible" Value="False" />
      <Setter Property="Opacity" Value="0.5" />
    </Style>

    <Style Selector="^ /template/ ScrollViewer#PART_ScrollViewer">
      <Setter Property="Margin" Value="0 8 0 8" />
    </Style>

    <Style Selector="^:has-label /template/ ScrollViewer#PART_ScrollViewer">
      <Setter Property="Margin" Value="0 16 0 8" />
    </Style>

    <Style Selector="^ /template/ TextBlock#PART_CharactersCounter">
      <Setter Property="FontSize" Value="12" />
      <Setter Property="Margin" Value="0,2,4,0" />
      <Setter Property="Opacity" Value="0.56" />
    </Style>

    <Style Selector="^:empty[(assists|TextFieldAssist.UseFloatingLabel)=True]:not(:watermark-as-label) /template/ TextBlock#PART_WatermarkText,
                     ^:empty:not(:has-label):not(:watermark-as-label) /template/ TextBlock#PART_WatermarkText">
      <Setter Property="IsVisible" Value="True" />
    </Style>

    <Style Selector="^ /template/ Border#PART_LabelRootBorder">
      <Setter Property="RenderTransformOrigin" Value="0,0" />
      <Setter Property="Margin" Value="0,16,0,-16" />
      <Setter Property="RenderTransform" Value="scale(1)" />
      <Setter Property="VerticalAlignment" Value="Top" />
      <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>

    <Style Selector="^ /template/ TextBlock#PART_LabelText">
      <Setter Property="FontSize" Value="16" />
    </Style>

    <Style Selector="^:focus-within">
      <Style Selector="^:empty /template/ TextBlock#PART_WatermarkText">
        <Setter Property="IsVisible" Value="True" />
      </Style>

      <Style Selector="^ /template/ TextBlock#PART_LabelText">
        <Setter Property="Foreground" Value="{DynamicResource MaterialPrimaryMidBrush}" />
      </Style>

      <Style Selector="^ /template/ ContentControl#PART_LeftContentControl,
                       ^ /template/ ContentControl#PART_RightContentControl">
        <Setter Property="Foreground" Value="{DynamicResource MaterialPrimaryMidBrush}" />
      </Style>

      <Style Selector="^ /template/ controls|MaterialUnderline#PART_Underline">
        <Setter Property="IsActive" Value="True" />
      </Style>
    </Style>

    <Style Selector="^:pointerover /template/ controls|MaterialUnderline#PART_Underline">
      <Setter Property="IsHovered" Value="True" />
    </Style>

    <Style Selector="^ /template/ ContentControl#PART_LeftContentControl">
      <Setter Property="VerticalAlignment" Value="Center" />
      <Setter Property="Margin" Value="0 0 8 0" />
    </Style>

    <Style Selector="^ /template/ ContentControl#PART_RightContentControl">
      <Setter Property="VerticalAlignment" Value="Center" />
      <Setter Property="Margin" Value="8 0 0 0" />
    </Style>

    <Style Selector="^[(assists|TextBoxAssist.CharacterCounterMode)=Hidden] /template/ TextBlock#PART_CharactersCounter">
      <Setter Property="IsVisible" Value="False" />
    </Style>

    <Style Selector="^[(DataValidationErrors.HasErrors)=True] /template/ TextBlock#PART_CharactersCounter">
      <Setter Property="Opacity" Value="0" />
    </Style>

    <Style Selector="^[(assists|TextBoxAssist.CompensateInnerLeftContentMargin)=True] /template/ ContentControl#PART_LeftContentControl">
      <Setter Property="Margin" Value="-0 -24 0 -24" />
    </Style>

    <Style Selector="^[(assists|TextBoxAssist.CompensateInnerRightContentMargin)=True] /template/ ContentControl#PART_RightContentControl">
      <Setter Property="Margin" Value="0 -24 -0 -24" />
    </Style>

    <!-- Transitions -->

    <Style Selector="^:not(.no-transitions)">
      <Style Selector="^ /template/ Border#PART_LabelRootBorder">
        <Setter Property="Transitions">
          <Transitions>
            <ThicknessTransition Duration="0:0:0.25" Property="Margin" Easing="CircularEaseOut" />
            <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.25" Easing="CircularEaseOut" />
          </Transitions>
        </Setter>
      </Style>

      <Style Selector="^ /template/ TextBlock#PART_LabelText">
        <Setter Property="Transitions">
          <Transitions>
            <BrushTransition Duration="0:0:0.12" Property="Foreground" Easing="LinearEasing" />
          </Transitions>
        </Setter>
      </Style>

      <Style Selector="^ /template/ ContentControl#PART_LeftContentControl,
                       ^ /template/ ContentControl#PART_RightContentControl">
        <Setter Property="Transitions">
          <Transitions>
            <BrushTransition Duration="0:0:0.12" Property="Foreground" Easing="LinearEasing" />
          </Transitions>
        </Setter>
      </Style>

      <Style Selector="^ /template/ Border#PART_BackgroundTextField">
        <Setter Property="Transitions">
          <Transitions>
            <BrushTransition Duration="0:0:0.25" Property="BorderBrush" Easing="LinearEasing" />
            <ThicknessTransition Duration="0:0:0.25" Property="BorderThickness" Easing="CircularEaseOut" />
          </Transitions>
        </Setter>
      </Style>

      <Style Selector="^ /template/ controls|MaterialUnderline#PART_Underline">
        <Setter Property="Transitions">
          <Transitions>
            <BrushTransition Duration="0:0:0.25" Property="ActiveBrush" Easing="LinearEasing" />
          </Transitions>
        </Setter>
      </Style>
    </Style>

    <!-- Invalid state (on validation fail) -->

    <Style Selector="^:error">
      <Style Selector="^ /template/ TextBlock#PART_LabelText">
        <Setter Property="Foreground" Value="{DynamicResource MaterialValidationErrorBrush}" />
      </Style>

      <Style Selector="^ /template/ controls|MaterialUnderline#PART_Underline">
        <Setter Property="IdleBrush" Value="{DynamicResource MaterialValidationErrorBrush}" />
        <Setter Property="ActiveBrush" Value="{DynamicResource MaterialValidationErrorBrush}" />
      </Style>

      <!-- TODO: Animate fading effect between hints text and validation error text -->
      <Style Selector="^ /template/ TextBlock#PART_HintsText">
        <Setter Property="Opacity" Value="0" />
        <Setter Property="IsVisible" Value="False" />
      </Style>
    </Style>

    <!-- Feedbacks -->

    <Style Selector="^:focus-within:not(:empty) /template/ Border#PART_LabelRootBorder,
                     ^:focus-within /template/ Border#PART_LabelRootBorder,
                     ^:not(:empty) /template/ Border#PART_LabelRootBorder,
                     ^[(assists|TextFieldAssist.UseFloatingLabel)=True]:not(:watermark-as-label) /template/ Border#PART_LabelRootBorder">
      <Setter Property="Margin" Value="0 0 0 -16" />
      <Setter Property="RenderTransform" Value="scale(0.75)" />
    </Style>

    <!-- Disabled state -->

    <Style Selector="^:disabled /template/ Grid#PART_RootGrid">
      <Setter Property="Opacity" Value="0.5" />
    </Style>

    <!-- Additional decorations for TextFields -->
    <Style Selector="^.clearButton[AcceptsReturn=False][IsReadOnly=False]:not(TextBox:empty)">
      <Setter Property="InnerRightContent" Value="{StaticResource ClearTextBoxButtonTemplate}" />
    </Style>

    <Style Selector="^.revealPasswordButton">
      <Setter Property="InnerRightContent" Value="{StaticResource RevealTextMaskToggleButtonTemplate}" />
    </Style>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type TextBox}" TargetType="TextBox"
                BasedOn="{StaticResource MaterialTextBox}" />

  <!-- Filled text field https://material.io/components/text-fields#filled-text-field -->

  <ControlTheme x:Key="MaterialFilledTextBox" TargetType="TextBox"
                BasedOn="{StaticResource MaterialTextBox}">
    <Setter Property="CornerRadius" Value="4,4,0,0" />
    <Setter Property="Background" Value="{DynamicResource MaterialTextFieldBoxBackgroundBrush}" />

    <Style Selector="^ /template/ Grid#PART_ContentGrid">
      <Setter Property="Margin" Value="0" />
    </Style>

    <Style Selector="^ /template/ Border#PART_LabelRootBorder">
      <Setter Property="Margin" Value="0,16,0,-16" />
      <Setter Property="RenderTransform" Value="scale(1)" />
    </Style>

    <Style Selector="^ /template/ ScrollViewer#PART_ScrollViewer">
      <Setter Property="Margin" Value="0 14 0 14" />
    </Style>

    <Style Selector="^:has-label /template/ ScrollViewer#PART_ScrollViewer">
      <Setter Property="Margin" Value="0 20 0 8" />
    </Style>

    <Style Selector="^[(assists|TextBoxAssist.CompensateInnerLeftContentMargin)=True] /template/ ContentControl#PART_LeftContentControl">
      <Setter Property="Margin" Value="-16 -24 0 -24" />
    </Style>

    <Style Selector="^[(assists|TextBoxAssist.CompensateInnerRightContentMargin)=True] /template/ ContentControl#PART_RightContentControl">
      <Setter Property="Margin" Value="0 -24 -12 -24" />
    </Style>

    <!-- Feedbacks -->

    <Style Selector="^:focus-within:not(:empty) /template/ Border#PART_LabelRootBorder,
                     ^:focus-within /template/ Border#PART_LabelRootBorder,
                     ^:not(:empty) /template/ Border#PART_LabelRootBorder,
                     ^[(assists|TextFieldAssist.UseFloatingLabel)=True]:not(:watermark-as-label) /template/ Border#PART_LabelRootBorder">
      <Setter Property="Margin" Value="0 6 0 -16" />
      <Setter Property="RenderTransform" Value="scale(0.75)" />
    </Style>

    <Style Selector="^:focus-within /template/ Border#PART_ContentBorder">
      <Setter Property="Background" Value="{DynamicResource MaterialTextFieldBoxHoverBackgroundBrush}" />
    </Style>

    <!-- Disabled state -->

    <Style Selector="^:disabled /template/ Border#PART_RootBorder">
      <Setter Property="Background" Value="{DynamicResource MaterialTextFieldBoxDisabledBackgroundBrush}" />
    </Style>
  </ControlTheme>

  <!-- Outlined text field https://material.io/components/text-fields#outlined-text-field -->

  <ControlTheme x:Key="MaterialOutlineTextBox" TargetType="TextBox"
                BasedOn="{StaticResource MaterialTextBox}">
    <Setter Property="internal:MaterialInternalAttachedProperties.UseClippingForBorder" Value="True" />
    <Setter Property="CornerRadius" Value="4" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource MaterialTextBoxBorderBrush}" />

    <Style Selector="^ /template/ Grid#PART_ContentGrid">
      <Setter Property="Margin" Value="0" />
    </Style>
    <!-- If we have label - add some space above for label placement -->
    <Style Selector="^:has-label /template/ Grid#PART_ContentGrid">
      <Setter Property="Margin" Value="0,6,0,0" />
    </Style>

    <Style Selector="^ /template/ Border#PART_ContentBorder">
      <Setter Property="Margin" Value="0" />
    </Style>

    <Style Selector="^ /template/ controls|MaterialUnderline#PART_Underline">
      <Setter Property="IsVisible" Value="False" />
    </Style>

    <Style Selector="^ /template/ ScrollViewer#PART_ScrollViewer">
      <Setter Property="Margin" Value="0 16 0 16" />
    </Style>

    <Style Selector="^:has-label /template/ ScrollViewer#PART_ScrollViewer">
      <Setter Property="Margin" Value="0 16 0 16" />
    </Style>

    <Style Selector="^[(assists|TextBoxAssist.CompensateInnerLeftContentMargin)=True] /template/ ContentControl#PART_LeftContentControl">
      <Setter Property="Margin" Value="-16 -24 0 -24" />
    </Style>

    <Style Selector="^[(assists|TextBoxAssist.CompensateInnerRightContentMargin)=True] /template/ ContentControl#PART_RightContentControl">
      <Setter Property="Margin" Value="0 -24 -12 -24" />
    </Style>

    <!-- Feedbacks -->

    <Style Selector="^:focus-within">
      <Setter Property="BorderBrush" Value="{DynamicResource MaterialPrimaryMidBrush}" />
      <Setter Property="BorderThickness" Value="2" />
    </Style>

    <Style Selector="^:empty:not(:focus-within) /template/ Border#PART_LabelRootBorder">
      <Setter Property="Margin" Value="0 16 0 0" />
      <Setter Property="RenderTransform" Value="scale(1)" />
    </Style>

    <Style Selector="^:focus-within:not(:empty) /template/ Border#PART_LabelRootBorder,
                     ^:focus-within /template/ Border#PART_LabelRootBorder,
                     ^:not(:empty) /template/ Border#PART_LabelRootBorder,
                     ^[(assists|TextFieldAssist.UseFloatingLabel)=True]:not(:watermark-as-label) /template/ Border#PART_LabelRootBorder">
      <Setter Property="Margin" Value="0 -6 0 0" />
      <Setter Property="RenderTransform" Value="scale(0.75)" />
    </Style>

    <!-- Invalid state -->

    <Style Selector="^:error">
      <Setter Property="BorderBrush" Value="{DynamicResource MaterialValidationErrorBrush}" />
    </Style>
  </ControlTheme>

  <ControlTheme x:Key="MaterialSoloTextBox"
                BasedOn="{StaticResource MaterialTextBox}"
                TargetType="TextBox">
    <Style Selector="^ /template/ controls|MaterialUnderline#PART_Underline">
      <Setter Property="IsVisible" Value="False" />
    </Style>

    <!-- Fix Strange transitions source -->
    <Style Selector="^ /template/ Border#PART_LabelRootBorder">
      <Setter Property="IsVisible" Value="False" />
    </Style>
  </ControlTheme>
</ResourceDictionary>